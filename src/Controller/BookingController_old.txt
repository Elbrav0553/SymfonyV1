<?php

namespace App\ControllerOLD;

use App\Entity\Booking;
use Doctrine\ORM\EntityManagerInterface;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class BookingController extends AbstractController
{
    #[Route('/booking_old', name: 'app_booking')]
    public function index(): JsonResponse
    {
        return $this->json([
            'message' => 'Welcome to your new booking controller!',
            'path' => 'src/Controller/booking_oldController.php',
        ]);
    }
    #[Route('/booking_old/{id}', name: 'app_booking')]
    public function show(EntityManagerInterface $entityManager, int $id): JsonResponse
    {
        $booking =  $entityManager->getRepository(Booking::class)->find($id);

        if (!$booking) {
            throw $this->createNotFoundException(
                'No product found for id ' . $id
            );
        }





        return $this->json([
            'message' => '/booking_old/{id}',
            'booking' => $booking->getDescription(),
            'path' => 'src/Controller/booking_oldController.php',
        ]);
    }
    #[Route('/booking_oldCreate', name: 'bookingCreate')]
    public function createBooking(EntityManagerInterface  $entityManager): JsonResponse
    {
        $booking = new Booking();
        $booking->setStatus(0);
        $booking->setDeletedAt(null);
        $booking->setCreatedAt(new \DateTimeImmutable());
        $booking->setDescription("TEST TEXT");

        $entityManager->persist($booking);
        $entityManager->flush();

        //return new Response('Saved new product with id ' . $booking->getId());
        return $this->json([
            'message' => 'Saved new product with id ' . $booking->getId(),
            'path' => 'src/Controller/booking_oldController.php',
        ]);
    }
    #[Route('/booking_oldCreateParams', name: 'bookingCreateParams')]
    public function createBookingParams(EntityManagerInterface  $entityManager, Request $request): JsonResponse
    {
        $booking = new Booking();
        $parameter = json_decode($request->getContent(), true);


        $booking->setStatus($parameter['status']);
        $booking->setDeletedAt(null);
        $booking->setCreatedAt(new \DateTimeImmutable());
        $booking->setDescription($parameter['description']);

        $entityManager->persist($booking);
        $entityManager->flush();



        //return new Response('Saved new product with id ' . $booking->getId());
        return $this->json([
            'message' => 'Saved new product with id ' . $booking->getId() . ' and parms are' . json_encode($parameter, true),
            'path' => 'src/Controller/booking_oldController.php',
        ]);
    }


    #[Route('/booking_old/delete/{id}', name: 'app_booking')]
    public function delete(EntityManagerInterface $entityManager, int $id): JsonResponse
    {
        $booking =  $entityManager->getRepository(Booking::class)->find($id);

        if (!$booking) {
            throw $this->createNotFoundException(
                'No product found for id ' . $id
            );
        }

        $response = $entityManager->remove($booking);
        $entityManager->flush();//si no no hace nada
        echo $response;
        return $this->json([
            'message' => '/booking_old/delete/{id}',
            'booking' => $response,
            'path' => 'src/Controller/booking_oldController.php',
        ]);
    }
}
